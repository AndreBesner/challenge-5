$(function () {
// Function that checks local storage for previous entries to calendar, and then prints them to the screen  
displayDescriptions();
// Gets current day/time information using dayjs library and prints it nicely to screen
let thisTime = dayjs().format('MMMM DD, YYYY')
  setInterval(()=>{ // Elements on screen are all set to update dynamically so the user is always up to date
    $("#currentDay").text("Today, it is: " + thisTime);
    let thisHour = dayjs().format('HH')
    // This is where we loop through each time block and assign a backround colour based on whether time has passed or not
    $(".time-block").each(function(){ 
    // This is where I made a mistake, I should have used .isbefore methods to make local storage easier if I had more time would go back and re do this
    // Led to hours of troubleshooting regarding the 9am time block and make me hack out a work around
    // The following code compares the assigned value of a time block to the current hour generated by dayjs library
    let timeBlockTime = $(this).attr("data-time");
    if($(this).attr("data-time") < thisHour){
      $(this).addClass("past");
    }
    else if($(this).attr("data-time") == thisHour){
      $(this).addClass("present");
    }
    if($(this).attr("data-time") > thisHour){
      $(this).addClass("future");
    }
  })
  }, 1000) //Elements on screen update every second. May need increase time if scope of project ever increases

  // The following functions represent the saving of user typed data to local storage to be recalled later
  // This function is executed when the user clicks the save button appended to the text area 
  $(".saveBtn").click(function(){
    let idHour = $(this).parents().attr("data-time"); // the "hour" value to be saved in storage
    let text = $(this).siblings("textarea").val(); // the actual user text to be saved with it's corresposing "hour"
    localStorage.setItem(idHour, text);
  })
  // The following function loops through the local storage and prints any data to screen
  // It is not a solution I love, but due to time contraints and the fact it is an mvp it will do for now
  // Because I was using less than and greater than statements when printing backround colour logic, [data-time 09](9am) was giving me issues 
  // This solution ensures the index when called by getItem is a string that is 2 characters long, and prepends a '0' to the 9 index so 
  // It can print the local data to the 9am. It literally works fine for all hours if you don't prepend, except for darn 09am.
  // With more time I would go back and rewrite previous functions to compare a day js hour to an assigned dayjs hour of each time block instead of greater than less than.
  function displayDescriptions(){
    for(var i = 9 ; i <= 17 ; i++){ // 9 to 17 being 9am to 5pm
        var desc = localStorage.getItem(i.toString().padStart(2, '0'));
        $(".time-block[data-time='" + i.toString().padStart(2, '0') + "'] .description").val(desc); // I came to this implementation with the help of Open AI's chatGPT
    }
  }
});
